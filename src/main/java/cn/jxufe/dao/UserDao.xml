<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.jxufe.dao.UserDao">
    <!--注意resultType注重的不是成员组成的
    对象，所以这里填list会报Cause: java.lang.UnsupportedOperationException错-->

    <!--选择user表中与用户类属性的对应的字段-->
    <sql id="selectUserInfo">
        select username, avatar,
               gender,follow_num, follower_num, blog_num, word_num, like_num
        from user
    </sql>

    <select id="getPasswordByEmail" parameterType="string" resultType="string">
        select password_email
        from user
        where email = #{email}
        limit 1;
    </select>

    <select id="getPasswordByTel" parameterType="string"  resultType="string">
        select password_tel
        from user
        where tel = #{tel}
        limit 1;
    </select>

    <!--注册用户添加信息，设置为preparedStatement是因为这里我想分几步
        注册时可以  默认是 statementType="PREPARED" 这种sql真的很nice，避免了幻读的情况-->
    <insert id="insertUser" parameterType="cn.jxufe.bean.User" useGeneratedKeys="true" keyProperty="userNo">
        insert into user (username, email, tel, password_email, password_tel, avatar)
        select #{username}, #{email}, #{tel}, #{passwordEmail}, #{passwordTel}, #{avatar}
        where not exists(select * from user where username = #{username} or email = #{email} or tel = #{tel});
    </insert>

    <select id="doseUsernameExisted" parameterType="string" resultType="boolean">
        select ISNULL((select 1 from user where username = #{username} limit 1));
    </select>

    <select id="doseEmailExisted" parameterType="string" resultType="boolean">
        select ISNULL((select 1 from user where email = #{email} limit 1));
    </select>

    <select id="doseTelExisted" parameterType="string" resultType="boolean">
        select ISNULL((select 1 from user where tel = #{tel} limit 1));
    </select>

    <select id="getUserNoByTel" resultType="int" parameterType="string">
        select user_no
        from user
        where tel = #{tel}
        limit 1;
    </select>

    <select id="getUserNoByEmail" resultType="int" parameterType="string">
        select user_no
        from user
        where email = #{email}
        limit 1;
    </select>

    <!--  size默认1024（表示的是存储对象引用的个数）-->
<!--    暂时不知道该不该使用二级缓存，先做完数据的操作的sql吧-->
<!--    <cache type="cn.jxufe.redis.RedisCache" size="1024" blocking="false"/>-->

    <!--获取用户信息，这里去掉了没必要的由邮箱和电话后去user的方式！-->
    <select id="getUserByUserNo" parameterType="int" resultType="cn.jxufe.bean.User">
        <include refid="selectUserInfo"/>
        where user_no = #{user_no}
        limit 1;
    </select>

    <!--下面3个为修改密码时用-->
    <select id="getEmailByUserNo" parameterType="int" resultType="string">
        select email
        from user
        where user_no = #{userNO}
        limit 1;
    </select>

    <select id="getTelByUserNo" parameterType="int" resultType="String">
        select tel
        from user
        where user_no = #{userNo}
        limit 1;
    </select>

    <update id="updatePasswordByUserNo">
        update user
        <set>
            <if test="!@org.springframework.util.StringUtils@isEmpty(passwordEmail)">password_email = #{passwordEmail},</if>
            <if test="!@org.springframework.util.StringUtils@isEmpty(passwordTel)">password_tel = #{passwordTel}</if>
        </set>
        where user_no = #{userNo}
        limit 1;
    </update>

    <select id="getSelfSummaryByUserNo" parameterType="int" resultType="string">
        select self_summary
        from user
        where user_no = #{userNO}
        limit 1;
    </select>

    <update id="updateSelfSummaryByUserNo">
        update user
        set self_summary = #{selfSummary}
        where user_no = #{userNo}
        limit 1;
    </update>

    <update id="updateAccountInfoByUserNo">
        update user
        <set>
            <if test="avatar != null">avatar = #{avatar},</if>
            <if test="username != null">username = #{username},</if>
            <if test="email != null">email = #{email},</if>
            <if test="tel != null">tel = #{tel}</if>
        </set>
        where user_no = #{userNo}
        limit 1;
    </update>

    <update id="updatePersonalInfoByUserNo">
        update user
        <set>
            <if test="gender != null">gender = #{gender},</if>
            <if test="github != null">github = #{github},</if>
            <if test="wechatQrImgLink != null">wechat_qr_img_link = #{wechatQrImgLink}</if>
        </set>
        where user_no = #{userNo}
        limit 1;
    </update>
</mapper>